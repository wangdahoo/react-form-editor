{"version":3,"sources":["ItemTypes.ts","components/Field.tsx","components/FieldList.tsx","components/FormAttrs.tsx","stores/FormAttrsStore.ts","stores/FormStore.ts","components/FieldAttrs.tsx","components/AttrsPanel.tsx","components/EditableField.tsx","components/EditableForm.tsx","index.tsx"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["export default {\n    FIELD: 'field',\n    EDITABLE_FIELD: 'eidtable_field',\n    EDITABLE_FORM: 'editable_form'\n}\n","import React from 'react'\nimport { useDrag } from 'react-dnd'\nimport ItemTypes from '../ItemTypes'\nimport { observer } from 'mobx-react'\n\ninterface FieldProps {\n    name: string,\n    text: string\n}\n\nfunction Field (props: FieldProps) {\n    const { name, text } = props\n\n    const [ { isDragging }, drag ]  = useDrag({\n        item: { name, type: ItemTypes.FIELD },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    })\n\n    return (\n        <div ref={drag} className=\"field\" style={{\n            opacity: isDragging ? 0.4 : 1\n        }}>\n            {text}\n        </div>\n    )\n}\n\nexport default observer(Field)\n","import React from 'react'\nimport { Row, Col, Tag, Divider } from 'antd'\n\nimport Field from './Field'\n\nconst fields = {\n    basic: [\n        {\n            name: 'input',\n            text: '文本框'\n        },\n        {\n            name: 'textarea',\n            text: '文本域'\n        },\n        {\n            name: 'checkbox',\n            text: '多选框'\n        },\n        {\n            name: 'radio',\n            text: '单选框'\n        },\n        {\n            name: 'select',\n            text: '下拉选择框'\n        },\n        {\n            name: 'text',\n            text: '文字'\n        }\n    ],\n\n    advanced: [\n        {\n            name: 'layout',\n            text: '布局'\n        }\n    ]\n}\n\nfunction FieldList () {\n    return (\n        <>\n            <div className=\"label\">基础字段</div>\n            {fields.basic.map((_, i, fields) => {\n                if (i % 2 === 0) {\n                    const fieldsInRow = fields.slice(i, i + 2)\n\n                    return (<Row gutter={10} key={i}>\n                        {fieldsInRow.map((field, j) => <Col span={12} key={`${i}-${j}`}>\n                           <Field name={field.name} text={field.text} />\n                        </Col>)}\n                    </Row>)\n                }\n\n                return null\n            })}\n\n            <div className=\"label\">高级字段</div>\n            {fields.advanced.map((_, i, fields) => {\n                if (i % 2 === 0) {\n                    const fieldsInRow = fields.slice(i, i + 2)\n\n                    return (<Row gutter={10} key={i}>\n                        {fieldsInRow.map((field, j) => <Col span={12} key={`${i}-${j}`}>\n                           <Field name={field.name} text={field.text} />\n                        </Col>)}\n                    </Row>)\n                }\n\n                return null\n            })}\n        </>\n    )\n}\n\nexport default FieldList\n","import React from 'react'\nimport { InputNumber, Radio } from 'antd'\nimport { observer } from 'mobx-react'\nimport { FormAttrsStore } from '../stores/FormAttrsStore'\nimport { RadioChangeEvent } from 'antd/lib/radio'\n\ninterface FormAttrsProps {\n    formAttrs: FormAttrsStore\n}\n\n@observer\nclass FormAttrs extends React.Component<FormAttrsProps> {\n    render () {\n        const { formAttrs } = this.props\n\n        return (\n            <div className=\"attrs\">\n                <div className=\"attr-item\">\n                    <div className=\"label\">表单宽度</div>\n                    <InputNumber className=\"input\" value={formAttrs.formWidth} min={0} step={1} onChange={value => {\n                        if (value !== undefined) {\n                            formAttrs.formWidth = value\n                        }\n                    }} />\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">表单宽度单位</div>\n                    <Radio.Group className=\"input\" value={formAttrs.formWidthUnit} buttonStyle=\"solid\" onChange={(e: RadioChangeEvent) => {\n                        formAttrs.formWidthUnit = e.target.value\n                    }}>\n                        <Radio.Button value=\"%\">百分比 %</Radio.Button>\n                        <Radio.Button value=\"px\">像素 px </Radio.Button>\n                    </Radio.Group>\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">标签宽度</div>\n                    <InputNumber className=\"input\" value={formAttrs.labelWidth} min={0} step={1} onChange={value => {\n                        if (value !== undefined) {\n                            formAttrs.labelWidth = value\n                        }\n                    }} />\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">标签宽度单位</div>\n                    <Radio.Group className=\"input\" value={formAttrs.labelWidthUnit} buttonStyle=\"solid\" onChange={(e: RadioChangeEvent) => {\n                        formAttrs.labelWidthUnit = e.target.value\n                    }}>\n                        <Radio.Button value=\"%\">百分比 %</Radio.Button>\n                        <Radio.Button value=\"px\">像素 px </Radio.Button>\n                    </Radio.Group>\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">标签对齐方式</div>\n                    <Radio.Group className=\"input\" value={formAttrs.labelAlign} buttonStyle=\"solid\" onChange={(e: RadioChangeEvent) => {\n                        formAttrs.labelAlign = e.target.value\n                    }}>\n                        <Radio.Button value=\"left\">左对齐</Radio.Button>\n                        <Radio.Button value=\"right\">右对齐</Radio.Button>\n                        <Radio.Button value=\"top\">顶部对齐</Radio.Button>\n                    </Radio.Group>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FormAttrs\n","import { observable, computed, autorun } from 'mobx'\n\nexport class FormAttrsStore {\n    @observable\n    formWidth: number = 100\n\n    @observable\n    formWidthUnit: '%' | 'px' = '%'\n\n    @observable\n    labelAlign: 'left' | 'right' | 'top' = 'right'\n\n    @observable\n    labelWidth: number = 100\n\n    @observable\n    labelWidthUnit: '%' | 'px' = 'px'\n\n    @computed\n    get formWidthString () {\n        return `${this.formWidth}${this.formWidthUnit}`\n    }\n\n    @computed\n    get labelWidthString () {\n        return `${this.labelWidth}${this.labelWidthUnit}`\n    }\n}\n\nexport default new FormAttrsStore()\n","import { observable, autorun } from 'mobx'\nimport { generate } from 'shortid'\nimport update from 'immutability-helper'\n\nexport enum FormItemType {\n    TEXT = 'text',\n    INPUT = 'input',\n    TEXTAREA = 'textarea',\n    CHECKBOX = 'checkbox',\n    RADIO = 'radio',\n    SELECT = 'select',\n    LAYOUT = 'layout'\n}\n\nexport type InputItem = {\n    id: string\n    itemType: FormItemType.INPUT\n    labelText: string\n    placeholder: string\n    defaultValue: string\n}\n\nexport type TextareaItem = {\n    id: string\n    itemType: FormItemType.TEXTAREA\n    labelText: string\n    placeholder: string\n    defaultValue: string\n}\n\nexport type CheckboxItem = {\n    id: string\n    itemType: FormItemType.CHECKBOX\n    labelText: string\n    options: {\n        value: string|number\n        text: string\n    }[]\n    defaultValue: (string|number) []\n}\n\nexport type RadioItem = {\n    id: string\n    itemType: FormItemType.RADIO\n    labelText: string\n    options: {\n        value: string|number\n        text: string\n    }[]\n    defaultValue: string|number\n    buttonStyle: 'outline' | 'solid'\n}\n\nexport type SelectItem = {\n    id: string\n    itemType: FormItemType.SELECT\n    labelText: string\n    options: {\n        value: string|number\n        text: string\n    }[]\n    defaultValue: string|number\n}\n\nexport type LayoutItemCol = {\n    span: number\n}\n\nexport type LayoutItem = {\n    id: string\n    itemType: FormItemType.LAYOUT\n    rows: LayoutItemCol[][]\n}\n\nexport type TextItem = {\n    id: string\n    itemType: FormItemType.TEXT\n    content: string\n    fontSize: number\n    lineHeight: number\n    textAlign: 'center'|'left'|'right'\n}\n\nexport type FormItem =  InputItem | TextareaItem | CheckboxItem | RadioItem | SelectItem | LayoutItem | TextItem\n\nexport type OutputFormItem = FormItem & { isActive: boolean }\n\nconst createFormItem = (itemType: string): FormItem => {\n    const id = generate()\n\n    switch (itemType) {\n        case FormItemType.TEXT:\n            return {\n                id,\n                itemType,\n                content: '文字内容',\n                fontSize: 14,\n                lineHeight: 21,\n                textAlign: 'left'\n            }\n\n        case FormItemType.LAYOUT:\n            return {\n                id,\n                itemType,\n                rows: [\n                    [\n                        { span: 12 },\n                        { span: 12 }\n                    ]\n                ]\n            }\n\n        case FormItemType.SELECT:\n            return {\n                id,\n                itemType,\n                labelText: '下拉选择框',\n                options: [\n                    createOption('选项 1'),\n                    createOption('选项 2'),\n                    createOption('选项 3')\n                ],\n                defaultValue: '选项 1'\n            }\n\n        case FormItemType.RADIO:\n            return {\n                id,\n                itemType,\n                labelText: '单选框',\n                options: [\n                    createOption('选项 1'),\n                    createOption('选项 2')\n                ],\n                buttonStyle: 'solid',\n                defaultValue: ''\n            }\n\n        case FormItemType.CHECKBOX:\n            return {\n                id,\n                itemType,\n                labelText: '多选框',\n                options: [\n                    createOption('选项 1')\n                ],\n                defaultValue: []\n            }\n\n        case FormItemType.TEXTAREA:\n            return {\n                id,\n                itemType,\n                labelText: '文本域',\n                placeholder: '文本域输入提示',\n                defaultValue: ''\n            }\n\n        default:\n            return {\n                id,\n                itemType: FormItemType.INPUT,\n                labelText: '文本框',\n                placeholder: '文本框输入提示',\n                defaultValue: ''\n            }\n    }\n}\n\nconst createOption = (value: string) => ({\n    value,\n    text: value\n})\n\nexport class FormStore {\n    @observable\n    private items: FormItem[] = [\n        createFormItem(FormItemType.INPUT),\n        createFormItem(FormItemType.TEXTAREA),\n        createFormItem(FormItemType.CHECKBOX),\n        createFormItem(FormItemType.RADIO),\n        createFormItem(FormItemType.SELECT),\n        createFormItem(FormItemType.LAYOUT),\n        createFormItem(FormItemType.TEXT),\n    ]\n\n    @observable\n    private activeId: string = ''\n\n    constructor () {\n        // autorun(() => console.log('form items: ', this.formItems))\n    }\n\n    add (itemType: string) {\n        const newItem: FormItem = createFormItem(itemType)\n        this.items.push(newItem)\n    }\n\n    delete (id: string) {\n        this.items = this.items.filter(item => item.id !== id)\n    }\n\n    update (newItem: FormItem) {\n        this.items = this.items.map((item) => {\n            return item.id === newItem.id\n                ? newItem\n                : item\n        })\n    }\n\n    activate (id: string) {\n        if (this.items.filter(item => item.id === id).length > 0) {\n            this.activeId = id\n        }\n    }\n\n    move (dragIndex: number, hoverIndex: number) {\n        const dragItem = this.items[dragIndex]\n\n        this.items = update(this.items, {\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragItem],\n            ],\n        })\n    }\n\n    addOption (id: string) {\n        this.items = this.items.map(item => {\n            if (item.id === id && [FormItemType.CHECKBOX, FormItemType.RADIO, FormItemType.SELECT].indexOf(item.itemType) > -1) {\n                const value = ``\n                ;(item as any).options.push(createOption(value))\n            }\n\n            return item\n        })\n    }\n\n    deleteOption (id: string, optionIndex: number) {\n        this.items = this.items.map(item => {\n            if (item.id === id && [FormItemType.CHECKBOX, FormItemType.RADIO, FormItemType.SELECT].indexOf(item.itemType) > -1) {\n                (item as any).options.splice(optionIndex, 1)\n            }\n\n            return item\n        })\n    }\n\n    updateOption (id: string, optionIndex: number, value: string) {\n        this.items = this.items.map(item => {\n            if (item.id === id && [FormItemType.CHECKBOX, FormItemType.RADIO, FormItemType.SELECT].indexOf(item.itemType) > -1) {\n                (item as any).options.splice(optionIndex, 1, createOption(value))\n            }\n\n            return item\n        })\n    }\n\n    setCheckboxDefaultOption(id: string, values: string[]) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.CHECKBOX === item.itemType) {\n                (item as CheckboxItem).defaultValue = values\n            }\n\n            return item\n        })\n    }\n\n    setRadioDefaultOption(id: string, value: string) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.RADIO === item.itemType) {\n                (item as RadioItem).defaultValue = value\n            }\n\n            return item\n        })\n    }\n\n    setSelectDefaultOption(id: string, value: string) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.SELECT === item.itemType) {\n                (item as SelectItem).defaultValue = value\n            }\n\n            return item\n        })\n    }\n\n    addCol (id: string, rowIndex: number) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.LAYOUT === item.itemType) {\n                (item as LayoutItem).rows[rowIndex].push({\n                    span: 12\n                })\n            }\n\n            return item\n        })\n    }\n\n    updateColSpan (id: string, rowIndex: number, colIndex: number, span: number) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.LAYOUT === item.itemType) {\n                (item as LayoutItem).rows[rowIndex].splice(colIndex, 1, { span })\n            }\n\n            return item\n        })\n    }\n\n    deleteCol (id: string, rowIndex: number, colIndex: number) {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.LAYOUT === item.itemType) {\n                (item as LayoutItem).rows[rowIndex].splice(colIndex, 1)\n            }\n\n            return item\n        })\n    }\n\n    updateTextItem (id: string, content: string, fontSize: number, lineHeight: number, textAlign: 'center'|'left'|'right') {\n        this.items = this.items.map(item => {\n            if (item.id === id && FormItemType.TEXT === item.itemType) {\n                ;(item as TextItem).content = content\n                ;(item as TextItem).fontSize = fontSize\n                ;(item as TextItem).lineHeight = lineHeight\n                ;(item as TextItem).textAlign = textAlign\n            }\n\n            return item\n        })\n    }\n\n    get formItems (): OutputFormItem[] {\n        return this.items.map(item => ({\n            ...item,\n            isActive: item.id === this.activeId\n        }))\n    }\n\n    get activeItem (): FormItem {\n        return find(this.items, this.activeId) as FormItem\n    }\n}\n\nfunction find(items: FormItem[], id: string) {\n    let result = null\n\n    for (let i = 0, len = items.length; i < len; i++) {\n        const item = items[i]\n        if (item.id === id) {\n            result = item\n            break\n        }\n    }\n\n    return result || {}\n}\n\nexport default new FormStore()\n","import React from 'react'\nimport { Input, List, Button, Select, InputNumber } from 'antd'\nimport { observer } from 'mobx-react'\nimport form, { FormStore, FormItemType, FormItem, InputItem, TextareaItem, CheckboxItem, RadioItem, SelectItem, LayoutItem, TextItem } from '../stores/FormStore'\n\ninterface FieldAttrsProps {\n    form: FormStore\n}\n\nfunction FieldAttrs (props: FieldAttrsProps) {\n    const { form } = props\n    const { id, itemType } = form.activeItem as any\n    const labelText = (form.activeItem as any).labelText\n\n    function onChangeAttrs (newItem: FormItem) {\n        form.update(newItem)\n    }\n\n    const renderInputExtraAttrs = (item: InputItem|TextareaItem) => {\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">输入提示</div>\n                    <Input className=\"input\" value={item.placeholder} onChange={e => onChangeAttrs({\n                        ...item,\n                        placeholder: e.target.value\n                    })} />\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">默认值</div>\n                    <Input className=\"input\" value={item.defaultValue} onChange={e => onChangeAttrs({\n                        ...item,\n                        defaultValue: e.target.value\n                    })} />\n                </div>\n            </>\n        )\n    }\n\n    const renderItemOptions = (item: CheckboxItem|RadioItem|SelectItem) => {\n        const { options } = item\n\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">选项</div>\n\n                    <List\n                        size=\"small\"\n                        itemLayout=\"horizontal\"\n                        dataSource={options}\n                        renderItem={(option, optionIndex) => (\n                            <List.Item key={optionIndex}>\n                                <div className=\"attr-item-option\">\n                                    <Input value={option.value} onChange={e => {\n                                        form.updateOption(item.id, optionIndex, e.target.value)\n                                    }}/>\n                                    <Button type=\"danger\" icon=\"delete\" className=\"btn-delete-option\" onClick={() => form.deleteOption(item.id, optionIndex)}>删除</Button>\n                                </div>\n                            </List.Item>\n                        )}\n                    />\n\n                    <Button type=\"primary\" onClick={() => form.addOption(item.id)} icon=\"plus\">添加选项</Button>\n                </div>\n            </>\n        )\n    }\n\n    const renderCheckboxExtraAttrs = (item: CheckboxItem) => {\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">默认值</div>\n\n                    <Select mode=\"tags\" value={item.defaultValue as string[]} style={{ width: '100%' }} onChange={(values: string[]) => form.setCheckboxDefaultOption(item.id, values)}>\n                        {item.options.map((option, optionIndex) => <Select.Option key={optionIndex} value={option.value}>{option.value}</Select.Option>)}\n                    </Select>\n                </div>\n            </>\n        )\n    }\n\n    const renderRadioExtraAttrs = (item: RadioItem) => {\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">默认值</div>\n\n                    <Select value={item.defaultValue as string} style={{ width: '100%' }} onChange={(value: string) => form.setRadioDefaultOption(item.id, value)}>\n                        {item.options.map((option, optionIndex) => <Select.Option key={optionIndex} value={option.value}>{option.value}</Select.Option>)}\n                    </Select>\n                </div>\n            </>\n        )\n    }\n\n    const renderSelectExtraAttrs = (item: SelectItem) => {\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">默认值</div>\n\n                    <Select value={item.defaultValue as string} style={{ width: '100%' }} onChange={(value: string) => form.setSelectDefaultOption(item.id, value)}>\n                        {item.options.map((option, optionIndex) => <Select.Option key={optionIndex} value={option.value}>{option.value}</Select.Option>)}\n                    </Select>\n                </div>\n            </>\n        )\n    }\n\n    const renderLayoutExtraAttrs = (item: LayoutItem) => {\n        const { rows } = item\n\n        return (\n            <>\n                {rows.map((row, rowIndex) => {\n                    return (\n                        <div className=\"attr-item\" key={rowIndex}>\n                            <div className=\"label\">列宽</div>\n\n                            <List\n                                size=\"small\"\n                                itemLayout=\"horizontal\"\n                                dataSource={row}\n                                renderItem={(col, colIndex) => (\n                                    <List.Item key={colIndex}>\n                                        <div className=\"attr-item-option\">\n                                            <InputNumber\n                                                className=\"input\"\n                                                value={col.span}\n                                                min={1}\n                                                max={24}\n                                                step={1}\n                                                onChange={value => {\n                                                    form.updateColSpan(item.id, rowIndex, colIndex, Number(value))\n                                                }}\n                                            />\n                                            <Button type=\"danger\" icon=\"delete\" className=\"btn-delete-option\" onClick={() => form.deleteCol(item.id, rowIndex, colIndex)}>删除</Button>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n\n                            <Button type=\"primary\" onClick={() => form.addCol(item.id, rowIndex)} icon=\"plus\">添加列</Button>\n                        </div>\n                    )\n                })}\n            </>\n        )\n    }\n\n    const renderTextExtraAttrs = (item: TextItem) => {\n        const { id, content, fontSize, lineHeight, textAlign } = item\n\n        return (\n            <>\n                <div className=\"attr-item\">\n                    <div className=\"label\">文字内容</div>\n\n                    <Input.TextArea\n                        value={content}\n                        onChange={e => form.updateTextItem(id, e.target.value, fontSize, lineHeight, textAlign)}\n                    />\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">文字大小</div>\n\n                    <InputNumber\n                        className=\"input\"\n                        value={fontSize}\n                        min={12}\n                        max={100}\n                        step={1}\n                        onChange={newFontSize => form.updateTextItem(id, content, Number(newFontSize), lineHeight, textAlign)}\n                    />\n                </div>\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">文字行高</div>\n\n                    <InputNumber\n                        className=\"input\"\n                        value={lineHeight}\n                        min={12}\n                        max={100}\n                        step={1}\n                        onChange={newLineHeight => form.updateTextItem(id, content, fontSize, Number(newLineHeight), textAlign)}\n                    />\n                </div>\n\n\n                <div className=\"attr-item\">\n                    <div className=\"label\">对齐方式</div>\n\n                    <Select\n                        style={{ width: '100%' }}\n                        value={textAlign}\n                        onChange={(newTextAlign: 'left'|'right'|'center') => form.updateTextItem(id, content, fontSize, lineHeight, newTextAlign)}\n                    >\n                        <Select.Option value={'left'}>左对齐</Select.Option>\n                        <Select.Option value={'right'}>右对齐</Select.Option>\n                        <Select.Option value={'center'}>居中</Select.Option>\n                    </Select>\n                </div>\n            </>\n        )\n    }\n\n    const hasLabelText = [\n        FormItemType.INPUT,\n        FormItemType.TEXTAREA,\n        FormItemType.CHECKBOX,\n        FormItemType.RADIO,\n        FormItemType.SELECT\n    ].indexOf(itemType) > -1\n\n    return (\n        <div className=\"attrs\">\n            <div className=\"attr-item\">\n                <div className=\"label\">标识</div>\n                <Input className=\"input\" value={id} disabled={true} />\n            </div>\n\n            {hasLabelText ? (\n                <div className=\"attr-item\">\n                    <div className=\"label\">标签文字</div>\n                    <Input className=\"input\" value={labelText} onChange={e => onChangeAttrs({\n                        ...form.activeItem,\n                        ...(labelText ? {\n\n                        } : {})\n                    })} />\n                </div>\n            ) : null}\n\n            {itemType === FormItemType.INPUT ? renderInputExtraAttrs(form.activeItem as InputItem) : null}\n            {itemType === FormItemType.TEXTAREA ? renderInputExtraAttrs(form.activeItem as TextareaItem) : null}\n\n            {itemType === FormItemType.CHECKBOX ? renderItemOptions(form.activeItem as CheckboxItem) : null}\n            {itemType === FormItemType.CHECKBOX ? renderCheckboxExtraAttrs(form.activeItem as CheckboxItem) : null}\n\n            {itemType === FormItemType.RADIO ? renderItemOptions(form.activeItem as RadioItem) : null}\n            {itemType === FormItemType.RADIO ? renderRadioExtraAttrs(form.activeItem as RadioItem) : null}\n\n            {itemType === FormItemType.SELECT ? renderItemOptions(form.activeItem as SelectItem) : null}\n            {itemType === FormItemType.SELECT ? renderSelectExtraAttrs(form.activeItem as SelectItem) : null}\n\n            {itemType === FormItemType.LAYOUT ? renderLayoutExtraAttrs(form.activeItem as LayoutItem) : null}\n\n            {itemType === FormItemType.TEXT ? renderTextExtraAttrs(form.activeItem as TextItem) : null}\n        </div>\n    )\n}\n\nexport default observer(FieldAttrs)\n","import React from 'react'\nimport { Tabs } from 'antd'\nimport FormAttrs from './FormAttrs'\nimport formAttrsStore from '../stores/FormAttrsStore'\nimport FieldAttrs from './FieldAttrs'\nimport formStore from '../stores/FormStore'\n\nconst { TabPane } = Tabs\n\nclass AttrsPanel extends React.Component {\n    onChangeTab = (activeTab: string) => {\n        // console.log(activeTab)\n    }\n\n    render () {\n        return (\n            <Tabs onChange={this.onChangeTab} animated={false}>\n                <TabPane tab=\"字段属性\" key=\"field-attrs\">\n                    <FieldAttrs form={formStore} />\n                </TabPane>\n                <TabPane tab=\"表单属性\" key=\"form-attrs\">\n                    <FormAttrs formAttrs={formAttrsStore} />\n                </TabPane>\n            </Tabs>\n        )\n    }\n}\n\nexport default AttrsPanel\n","import React, { useRef } from 'react'\nimport { useDrag, useDrop, DragObjectWithType } from 'react-dnd'\nimport ItemTypes from '../ItemTypes'\nimport { Input, Radio, Checkbox, Select, Button, Row, Col } from 'antd'\nimport formAttrs from '../stores/FormAttrsStore'\nimport form from '../stores/FormStore'\nimport { OutputFormItem, FormItemType, InputItem, TextareaItem, RadioItem, CheckboxItem, SelectItem } from '../stores/FormStore'\nimport { observer } from 'mobx-react'\nimport classnames from 'classnames'\n\ninterface EditableFieldProps {\n    formItem: OutputFormItem\n    formItemIndex: number\n    moveFormItem: (dragIndex: number, hoverIndex: number) => void\n}\n\nfunction EditableField (props: EditableFieldProps) {\n    const { formItem, formItemIndex, moveFormItem } = props\n\n    const ref = useRef(null)\n\n    const [, drop] = useDrop({\n        accept: [ ItemTypes.EDITABLE_FIELD ],\n        hover (item, monitor) {\n            if (ref.current === null) {\n                return\n            }\n\n            const dragIndex = (item as (DragObjectWithType & { index: number })).index\n            const hoverIndex = formItemIndex\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n\n            // Determine rectangle on screen\n            const hoverBoundingRect = (ref.current as any).getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n\n            if (clientOffset === null) return\n\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            // Time to actually perform the action\n            moveFormItem(dragIndex, hoverIndex)\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            ;(item as (DragObjectWithType & { index: number })).index = hoverIndex\n        }\n    })\n\n    const [ { isDragging }, drag ]  = useDrag({\n        item: { index: formItemIndex, type: ItemTypes.EDITABLE_FIELD },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    })\n\n    drag(drop(ref))\n\n    const renderFormItem = (formItem: OutputFormItem) => {\n        const { itemType } = formItem\n\n        switch (itemType) {\n        case FormItemType.SELECT:\n            const selectItem = formItem as (SelectItem & { isActive: boolean })\n\n            return (\n                <Select\n                    value={selectItem.defaultValue}\n                    style={{width: '100%'}}\n                >\n                    {selectItem.options.map((option, optionIndex) => (\n                        <Select.Option key={optionIndex} value={option.value}>\n                            {option.text}\n                        </Select.Option>\n                    ))}\n                </Select>\n            )\n\n        case FormItemType.CHECKBOX:\n            const checkboxItem = formItem as (CheckboxItem & { isActive: boolean })\n\n            return (\n                <Checkbox.Group\n                    value={checkboxItem.defaultValue}\n                >\n                    {checkboxItem.options.map((option, optionIndex) => (\n                        <Checkbox key={optionIndex} value={option.value}>\n                            {option.text}\n                        </Checkbox>\n                    ))}\n                </Checkbox.Group>\n            )\n\n        case FormItemType.RADIO:\n            const radioItem = formItem as (RadioItem & { isActive: boolean })\n\n            return (\n                <Radio.Group\n                  value={radioItem.defaultValue}\n                  buttonStyle={radioItem.buttonStyle}\n                >\n                  {radioItem.options.map((option, optionIndex) => (\n                    <Radio.Button key={optionIndex} value={option.value}>\n                      {option.text}\n                    </Radio.Button>\n                  ))}\n                </Radio.Group>\n              )\n\n        case FormItemType.TEXTAREA:\n            const textareaItem = formItem as (TextareaItem & { isActive: boolean })\n\n            return (\n                <Input.TextArea\n                    value={textareaItem.defaultValue}\n                    placeholder={textareaItem.placeholder}\n                />\n            )\n\n        default:\n            const inputItem = formItem as (InputItem & { isActive: boolean })\n\n            return (\n                <Input\n                    value={inputItem.defaultValue || ''}\n                    placeholder={inputItem.placeholder}\n                />\n            )\n        }\n    }\n\n    if (formItem.itemType === FormItemType.LAYOUT) {\n        return (\n            <div\n                ref={ref}\n                className={classnames(\n                    'field-editable field-editable-layout',\n                    formItem.isActive ? 'field-editable-active' : ''\n                )}\n                style={{\n                    opacity: isDragging ? 0.4 : 1\n                }}\n                onMouseDown={() => form.activate(formItem.id)}\n            >\n                {formItem.rows.map((row, rowIndex) => (\n                    <Row key={rowIndex} gutter={5}>\n                        {row.map((col, colIndex) => (\n                            <Col key={colIndex} span={col.span}></Col>\n                        ))}\n                    </Row>\n                ))}\n\n                <Button className=\"btn-delete\" type=\"danger\" size=\"small\" icon=\"delete\" onClick={() => form.delete(formItem.id)}>删除</Button>\n            </div>\n        )\n    }\n\n    if (formItem.itemType === FormItemType.TEXT) {\n        return (\n            <div\n                ref={ref}\n                className={classnames(\n                    'field-editable field-editable-text',\n                    formItem.isActive ? 'field-editable-active' : ''\n                )}\n                style={{\n                    opacity: isDragging ? 0.4 : 1\n                }}\n                onMouseDown={() => form.activate(formItem.id)}\n            >\n                <div\n                    style={{\n                        fontSize: formItem.fontSize,\n                        lineHeight: `${formItem.lineHeight}px`,\n                        textAlign: formItem.textAlign\n                    }}\n                >\n                    {formItem.content}\n                </div>\n\n                <Button className=\"btn-delete\" type=\"danger\" size=\"small\" icon=\"delete\" onClick={() => form.delete(formItem.id)}>删除</Button>\n            </div>\n        )\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={classnames(\n                'field-editable',\n                formAttrs.labelAlign === 'top' ? 'label-standalone' : '',\n                formItem.isActive ? 'field-editable-active' : ''\n            )}\n            style={{\n                opacity: isDragging ? 0.4 : 1\n            }}\n            onMouseDown={() => form.activate(formItem.id)}\n        >\n            <div className={classnames('field-editable-label', formAttrs.labelAlign === 'top' ? 'field-editable-label-top' : '')} style={{\n                width: formAttrs.labelWidth,\n                ...(formAttrs.labelAlign !== 'top' ? {\n                    textAlign: formAttrs.labelAlign\n                } : {})\n            }}>\n                {(formItem as any).labelText}\n            </div>\n            <div className='field-editable-content'>\n                {renderFormItem(formItem)}\n            </div>\n\n            <Button className=\"btn-delete\" type=\"danger\" size=\"small\" icon=\"delete\" onClick={() => form.delete(formItem.id)}>删除</Button>\n        </div>\n    )\n}\n\nexport default observer(EditableField)\n","import React, { useCallback } from 'react'\nimport { observer } from 'mobx-react'\nimport { FormAttrsStore } from '../stores/FormAttrsStore'\nimport { useDrop } from 'react-dnd'\nimport ItemTypes from '../ItemTypes'\nimport { FormStore } from '../stores/FormStore'\nimport EditableField from './EditableField'\n\ninterface EditableFormProps {\n    formAttrs: FormAttrsStore,\n    form: FormStore\n}\n\nfunction EditableForm (props: EditableFormProps) {\n    const { formAttrs, form } = props\n    const moveFormItem = useCallback((dragIndex: number, hoverIndex: number) => form.move(dragIndex, hoverIndex), [form.formItems])\n\n    const [{ isOver, canDrop }, drop ] = useDrop({\n        accept: [\n            ItemTypes.FIELD\n        ],\n        drop: (item: any, monitor) => {\n            if (item.type === ItemTypes.FIELD) {\n                form.add(item.name)\n            }\n        },\n        collect: monitor => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n        }),\n    })\n\n    return (\n        <div ref={drop} className=\"editable-form\" style={{\n            width: formAttrs.formWidthString\n        }}>\n            {form.formItems.map((formItem, index) => (\n                <EditableField\n                    key={formItem.id}\n                    formItem={formItem}\n                    formItemIndex={index}\n                    moveFormItem={moveFormItem}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default observer(EditableForm)\n","import './index.less'\nimport React from 'react'\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport { Layout } from 'antd'\nimport FieldList from './components/FieldList'\nimport AttrsPanel from './components/AttrsPanel'\nimport EditableForm from './components/EditableForm'\nimport formAttrsStore from './stores/FormAttrsStore'\nimport formStore from './stores/FormStore'\n// https://github.com/mobxjs/mobx-react-lite/#observer-batching\nimport 'mobx-react-lite/batchingForReactDom'\n\nconst { Header, Content, Sider } = Layout\n\ninterface FormEditorProps {\n    style?: React.CSSProperties\n}\n\nexport default function FormEditor (props: FormEditorProps) {\n    const { style } = props\n\n    return (\n        <DndProvider backend={Backend}>\n            <Layout className=\"form-editor\" style={style}>\n                <Sider theme='light' className=\"form-editor-components\">\n                    <FieldList />\n                </Sider>\n                <Layout className=\"form-editor-content\">\n                    <Layout className=\"form-editor-content-main\">\n                        <Header className=\"form-editor-toolbar\">顶部 toolbar</Header>\n                        <Content className=\"form-editor-editarea\">\n                            <EditableForm formAttrs={formAttrsStore} form={formStore}/>\n                        </Content>\n                    </Layout>\n                    <Sider theme='light' width={300} className=\"form-editor-content-attrs\">\n                        <AttrsPanel />\n                    </Sider>\n                </Layout>\n            </Layout>\n        </DndProvider>\n    )\n}\n"]}